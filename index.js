// Generated by CoffeeScript 1.4.0
(function() {
  var check, iterator, pivot, sort, sortByColumn, step, _;

  _ = require('underscore');

  step = 0;

  check = function(value) {
    step++;
    console.log("step: " + step);
    return console.log(value);
  };

  iterator = function(n) {
    if (n === 1) {
      return true;
    } else {
      return false;
    }
  };

  exports.sort = sort = function(matrix, column, isUpward, callback) {
    var bar, foo, hit, item, length, miss, next, res, _i, _j, _len, _len1, _ref;
    if (column == null) {
      column = 0;
    }
    if (isUpward == null) {
      isUpward = true;
    }
    length = matrix.length;
    res = matrix;
    if (length > 1 && column < matrix[0].length) {
      res = [];
      hit = _.filter(matrix, function(row) {
        return iterator(row[column]);
      });
      miss = _.filter(matrix, function(row) {
        return !iterator(row[column]);
      });
      next = column + 1;
      hit = sort(hit, next, false);
      miss = sort(miss, next, true);
      _ref = isUpward ? [hit, miss] : [miss, hit], foo = _ref[0], bar = _ref[1];
      res = [];
      if (foo != null) {
        for (_i = 0, _len = foo.length; _i < _len; _i++) {
          item = foo[_i];
          res.push(item);
        }
      }
      if (bar != null) {
        for (_j = 0, _len1 = bar.length; _j < _len1; _j++) {
          item = bar[_j];
          res.push(item);
        }
      }
      if (callback != null) {
        callback(res);
      }
      hit = miss = next = foo = bar = null;
    }
    return res;
  };

  exports.pivot = pivot = function(matrix, callback) {
    var columnNumber, element, res, row, rowNumber, _i, _j, _k, _len, _len1, _len2, _ref;
    res = [];
    _ref = matrix[0];
    for (columnNumber = _i = 0, _len = _ref.length; _i < _len; columnNumber = ++_i) {
      element = _ref[columnNumber];
      res.push([]);
    }
    for (rowNumber = _j = 0, _len1 = matrix.length; _j < _len1; rowNumber = ++_j) {
      row = matrix[rowNumber];
      for (columnNumber = _k = 0, _len2 = row.length; _k < _len2; columnNumber = ++_k) {
        element = row[columnNumber];
        res[columnNumber][rowNumber] = element;
      }
    }
    if (callback != null) {
      callback(res);
    }
    return res;
  };

  exports.sortByColumn = sortByColumn = function(matrix, callback) {
    matrix = pivot(matrix);
    matrix = _.sortBy(matrix, function(column) {
      var n;
      n = _.reduce(column, (function(foo, bar) {
        return foo + bar;
      }), 0);
      return n * -1;
    });
    matrix = pivot(matrix);
    if (callback != null) {
      callback(matrix);
    }
    return matrix;
  };

}).call(this);
